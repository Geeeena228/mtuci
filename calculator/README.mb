1.Устанавливаем библиотеку для создания оконных приложений (PyQt5)
2.Импортируем необходимые библиотеки для создания приложения (sys,QApplication, QWidget, QLineEdit, QHBoxLayout, QVBoxLayout, QPushButton)
3.Создаем класс calculator и наследуем его от класса QWidgets
4.Внутри конструктора создаем оси выравнивания 
5.В конструкторе создаем виджеты и привязываем к соответсвующим осям выравнивания
6.Создаем события, отвечающие за реакцию нажатия по кнопкам
7.Создаем метод класса для обработки кнопок, отвечающих за ввод цифр в линию ввода текста
8.Создаем метод класса для обработки нажатия на кнопку математической операции
9.Создаем метод класса для обработки нажатия на кнопку результата
10.Создаем обработку для все возможных исключений(деление на ноль)
11.Добавляем кнопки для математических операций: вычитание, умножение, деление
12.Создаем методы обработки для математических операций


1.Install the library for creating window applications (PyQt5)
2.Import the necessary libraries for creating an application (sys,QApplication, QWidget, QLineEdit, QHBoxLayout, QVBoxLayout, QPushButton)
3.Create the calculator class and inherit it from the QWidgets class
4.Create alignment axes inside the constructor 
5.In the constructor, we create widgets and bind them to the corresponding alignment axes
6.Create events that are responsible for the reaction of clicking on the buttons
7.Creating a class method for processing buttons responsible for entering numbers into the text input line
8.Creating a class method to handle clicking on a mathematical operation button
9.Creating a class method to handle clicking on the result button
10.Creating processing for all possible exceptions (division by zero)
11. Add buttons for mathematical operations: subtraction, multiplication, division
12.Creating processing methods for mathematical operations
